{"title":"第二十九期","permalink":"http://PaicHyperionDev.github.io/2015/12/01/029/","date":"2015-12-01T00:00:00.000Z","content":"<p>标签（空格分隔）： 技术周报</p>\n<hr>\n<blockquote>\n<p>@author ASCE1885的 <a href=\"https://github.com/ASCE1885\" target=\"_blank\" rel=\"external\">Github</a>  <a href=\"http://www.jianshu.com/users/4ef984470da8/latest_articles\" target=\"_blank\" rel=\"external\">简书</a> <a href=\"http://weibo.com/asce885/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo\" target=\"_blank\" rel=\"external\">微博</a> <a href=\"http://blog.csdn.net/asce1885\" target=\"_blank\" rel=\"external\">CSDN</a></p>\n</blockquote>\n<h2 id=\"Android开发\">Android开发</h2><h4 id=\"1）Android_动态加载技术系列\">1）Android 动态加载技术系列</h4><ul>\n<li><a href=\"http://segmentfault.com/a/1190000004062866\" target=\"_blank\" rel=\"external\">简单易懂的介绍方式</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000004062880\" target=\"_blank\" rel=\"external\">ClassLoader工作机制</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000004062899\" target=\"_blank\" rel=\"external\">加载SD卡中的SO库</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000004062952\" target=\"_blank\" rel=\"external\">简单加载模式</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000004062972\" target=\"_blank\" rel=\"external\">代理Activity模式</a></li>\n<li><a href=\"http://segmentfault.com/a/1190000004077469\" target=\"_blank\" rel=\"external\">动态创建Activity模式</a></li>\n</ul>\n<h4 id=\"2）Speeding_up_Gradle_builds\">2）<a href=\"http://kevinpelgrims.com/blog/2015/06/11/speeding-up-your-gradle-builds/\" target=\"_blank\" rel=\"external\">Speeding up Gradle builds</a></h4><p>A common complaint among Android developers that switch to Gradle is that the build time for their projects increases significantly. Gradle provides a lot of flexibility, but this power comes at the cost of a slower build process. Luckily there are several ways to speed things up.</p>\n<h4 id=\"3）dex分包变形记\">3）<a href=\"http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=193\" target=\"_blank\" rel=\"external\">dex分包变形记</a></h4><p>就在项目灰度测试前不久，爆出了在 Android 3.0以下手机上安装时出现 INSTALL <em> FAILED_DEXOPT，导致安装失败。INSTALL </em> FAILED_DEXOPT导致无法安装的问题，从根本上来说，可能是两个原因造成的：</p>\n<ul>\n<li>单个 dex 文件方法总数65K 的限制。</li>\n<li>Dexopt 的 LinearAlloc 限制。</li>\n</ul>\n<h4 id=\"4）Android应用启动优化:一种DelayLoad的实现和原理\">4）<a href=\"http://www.androidperformance.com/2015/11/18/Android-app-lunch-optimize-delay-load.html\" target=\"_blank\" rel=\"external\">Android应用启动优化:一种DelayLoad的实现和原理</a></h4><p>在 Android 开发中,应用启动速度是一个非常重要的点,应用启动优化也是一个非常重要的过程.对于应用启动优化,其实核心思想就是在启动过程中少做事情,具体实践的时候无非就是下面几种：</p>\n<ul>\n<li>异步加载</li>\n<li>延时加载</li>\n<li>懒加载</li>\n</ul>\n<h4 id=\"5）如何开发一个App（Android）\">5）<a href=\"http://blog.csdn.net/wwj_748/article/details/50088959\" target=\"_blank\" rel=\"external\">如何开发一个App（Android）</a></h4><p>本篇博客从开发的角度来介绍如何开发一个Android App，需要说明一点是，这里只是提供一个如何开发一个app的思路，并不会介绍很多技术上的细节，从整个大局去把握如何去构思一个app的开发，让你对独立开发一款app的时候有个理解。</p>\n<h2 id=\"iOS开发\">iOS开发</h2><h4 id=\"1）如何让iOS_保持界面流畅？这些技巧你知道吗\">1）<a href=\"http://www.cocoachina.com/ios/20151130/14477.html\" target=\"_blank\" rel=\"external\">如何让iOS 保持界面流畅？这些技巧你知道吗</a></h4><p>这篇文章会非常详细的分析 iOS 界面构建中的各种性能问题以及对应的解决思路，同时给出一个开源的微博列表实现，通过实际的代码展示如何构建流畅的交互。</p>\n<h4 id=\"2）如何实现iOS图书动画：第1部分_第2部分\">2）如何实现iOS图书动画：<a href=\"http://www.devtf.cn/?p=1127\" target=\"_blank\" rel=\"external\">第1部分</a>  <a href=\"http://www.devtf.cn/?p=1129\" target=\"_blank\" rel=\"external\">第2部分</a></h4><p>本教程分为2个部分，教你开发一个漂亮的iOS图书打开和翻页动画。<br>在第1部分，你将学习到如何定制化Collection View Layout，并通过使用深度和阴影使App看起来更真实。在第2部分，你将学习如何以一种合理的方法在两个不同的控制器之间创建自定义的过渡特效，以及利用手势在两个视图间创建自然的、直观的过渡效果。</p>\n<h4 id=\"3）解析_iOS_动画原理与实现\">3）<a href=\"http://www.jianshu.com/p/13c231b76594\" target=\"_blank\" rel=\"external\">解析 iOS 动画原理与实现</a></h4><p>这篇文章不会教大家如何实现一个具体的动画效果，我会从动画的本质出发，来说说 iOS 动画的原理与实现方式。</p>\n<h4 id=\"4）在_iOS_模拟器中调试_Web_页面\">4）<a href=\"http://www.cocoachina.com/webapp/20151126/14448.html\" target=\"_blank\" rel=\"external\">在 iOS 模拟器中调试 Web 页面</a></h4><p>虽然 Chrome DevTools 可以模拟手机的环境，但与真实环境差别还是比较大的，另外 Chrome 模拟的环境对 App 内 Webview 场景也无能为力（手机淘宝上的无线 Web 页面有非常多的功能需要调用 Webview 提供的 JSBridge 接口实现）。所以真机调试和模拟器调试是无线 Web 开发必备技能。</p>\n<h4 id=\"5）知其然亦知其所以然-NSOperation并发编程\">5）<a href=\"http://www.jianshu.com/p/ebb3e42049fd\" target=\"_blank\" rel=\"external\">知其然亦知其所以然-NSOperation并发编程</a></h4><p>对于iOS的并发编程, 用的最普遍的就是GCD了, GCD结合Block可以so easy的实现多线程并发编程. 但如果你看一些诸如AFNetworking, SDWebImage的源码, 你会发现它们使用的都是NSOperation, 纳尼? 难道NSOperation这货更屌? YES, 它确实更屌! Okay, 那我们就先来简单PK下GCD和NSOperation(当然这里也包括NSOperationQueue).</p>\n<h2 id=\"技术纵横\">技术纵横</h2><h4 id=\"1）ReactNative_For_Android_10个最常见问题\">1）<a href=\"https://github.com/yipengmu/ReactNative_Android_QA\" target=\"_blank\" rel=\"external\">ReactNative For Android 10个最常见问题</a></h4><p>这里逐条记录下最容易遇到的React native android 相关case。</p>\n<h4 id=\"2）我所亲见的前端技术变革\">2）<a href=\"http://zhuanlan.zhihu.com/fangtalk/20359442\" target=\"_blank\" rel=\"external\">我所亲见的前端技术变革</a></h4><p>可能每个人对前端的发展变化的理解都不一样，本文仅以我的视角，回顾了我所理解的变化。这么多年带了很多团队，交付了很多的项目，但同时我也有自知之明，也许我只是井底之蛙，看到了我能看到的世界，但是没有关系，重要的是，每个人都需要找到自己对这个世界的认识，找到拥抱这个变化的世界的方法，独一无二的方法。</p>\n<h4 id=\"3）深入理解_react-router_路由系统\">3）<a href=\"http://zhuanlan.zhihu.com/purerender/20381597\" target=\"_blank\" rel=\"external\">深入理解 react-router 路由系统</a></h4><p>在 web 应用开发中，路由系统是不可或缺的一部分。在浏览器当前的 URL 发生变化时，路由系统会做出一些响应，用来保证用户界面与 URL 的同步。随着单页应用时代的到来，为之服务的前端路由系统也相继出现了。有一些独立的第三方路由系统，比如 director，代码库也比较轻量。</p>\n<h4 id=\"4）ES2015_&amp;_babel_实战：开发NPM模块\">4）<a href=\"http://morning.work/page/2015-11/es6-es7-develop-npm-module-using-babel.html\" target=\"_blank\" rel=\"external\">ES2015 &amp; babel 实战：开发NPM模块</a></h4><p>本文的重点是介绍借助babel开发Node.js项目的基本方法，同时会简略介绍文中出现的ES2015新语法，本文内容将分为以下几部分：</p>\n<ul>\n<li>配置babel编译环境</li>\n<li>编写模块</li>\n<li>单元测试</li>\n<li>发布模块</li>\n</ul>\n<h4 id=\"5）Webpack傻瓜式指南（一）\">5）<a href=\"http://zhuanlan.zhihu.com/FrontendMagazine/20367175\" target=\"_blank\" rel=\"external\">Webpack傻瓜式指南（一）</a></h4><p>Webpack最近很热，我一开始是想翻译一篇国外关于webpack的佳作，但是找来找去也没有一篇让我感觉到很满意的，好多都是一步到位，满屏幕都是React＋Webpack，官方文档写的不太好，好多点都没有解释的详细，所以我参考了几篇文章，写一篇傻瓜式指南。本文适合第一次接触webpack的朋友，如果是老鸟，就不用看了。这是系列的第一篇，主要讲他最基本的用法。</p>\n<h2 id=\"开源函数库与工具\">开源函数库与工具</h2><h4 id=\"1）ARAnimation\">1）<a href=\"https://github.com/AugustRush/ARAnimation\" target=\"_blank\" rel=\"external\">ARAnimation</a></h4><p>ARAnimation 是对 Core Animation 进行了封装, 帮助 iOS 开发者能更加便捷的在项目中使用动画。</p>\n<h4 id=\"2）KLog\">2）<a href=\"https://github.com/ZhaoKaiQiang/KLog\" target=\"_blank\" rel=\"external\">KLog</a></h4><p>这是一个Android专用的LogCat工具，主要功能为打印行号、函数调用、Json解析、XML解析、点击跳转、Log信息保存等功能。灵感来自Logger。</p>\n<h4 id=\"3）ElasticProgressBar\">3）<a href=\"https://github.com/michelelacorte/ElasticProgressBar\" target=\"_blank\" rel=\"external\">ElasticProgressBar</a></h4><p>ElasticProgressBar 是一款有弹性的 Android 加载进度条。</p>\n<p><img src=\"https://raw.githubusercontent.com/Tibolte/ElasticDownload/master/success.gif\" alt=\"\"></p>\n<h4 id=\"4）packer-ng-plugin\">4）<a href=\"https://github.com/mcxiaoke/packer-ng-plugin\" target=\"_blank\" rel=\"external\">packer-ng-plugin</a></h4><p>下一代Android渠道打包工具。</p>\n"}